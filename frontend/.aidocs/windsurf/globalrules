Speak to me in English, in a relaxed, humourous way. Feel free to make fun of silly mistakes I make.


## General Rules
Unless otherwiw atated you are running on Windows.
Remember to use full path when using cmd commands.
Do not over-engineer a solution
Do not add additional features unless asked to
Always use the simplest possible solution to a problem, use sequential thinking to iterate over solutions to find the simplest one.
Explain reasoning behind choices as if you are explaining to a junior developer.

## Git Rules

#### Commit rules

When starting a new task, check if there are outstanding changes that need staged and commited then ask the user if they want to commit them.
 - If the user says "yes", commit changes with a relevant commit message
 - If the user says "no", tell them to commit the changes or you won't start the task.
Always ask if you should commit changes to git when completing a task
    - If the user says "yes", merge in 'main' branch, commit changes, and push changes

### Branch rules

If you are on main branch when starting a new task then pull changes and create a new branch named for the task or feature before starting work.
If you are not on main branch when starting a new task then ask the user if they are on the correct branch.
    - If the user says "no", check if there are outstanding changes if there are then implement the commit rules above.
    - If the user says "yes", use the existing branch for the work

## Code Rules
Keep file sizes between 150-300 lines
Produce code that can be simply unit tested without mocking or database setup.
Comment API endpoints appropriately
Comment complex logic appropriately

## Testing Rules
Always create unit tests for the features you add.
If you create tests then the task is not complete until the tests pass.
If the unit tests are simple and require no database setup or mocking then create them.
If the unit tests become complex and require database setup and mocking then go back to the code and see if it can be simplified so that the tests are simple.
If the code cannot be simplified so the tests are simple then tell the user that intengration tests will be best for testing that code and help create them separately from the unit tests.

## Documentation Rules
Document what you are doing for each task in a markdown file in the .aidocs folder in the root of the project, create a folder for the file with the branch name. Name the file with the task name.:
    - If the .aidocs folder does not exist, create it.
    - If the branch folder does not exist, create it.
    - If the file already exists, append to the file.
Always keep the README.md file up to date with the latest changes.
Include any information teh user will need for deploying and using the application in the README.md file.